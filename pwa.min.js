// PWA Initialization
(function() {
  'use strict';

  // Check if browser supports service workers
  if (!('serviceWorker' in navigator)) {
    console.log('Service Workers not supported');
    return;
  }

  // Register service worker
  async function registerSW() {
    try {
      const registration = await navigator.serviceWorker.register('/sw.js', {
        scope: '/'
      });
      
      console.log('Service Worker registered:', registration.scope);
      
      // Check for updates
      registration.addEventListener('updatefound', () => {
        const newWorker = registration.installing;
        
        newWorker.addEventListener('statechange', () => {
          if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
            // New service worker available
            showUpdateNotification(newWorker);
          }
        });
      });
      
      // Check for updates every hour
      setInterval(() => {
        registration.update();
      }, 60 * 60 * 1000);
      
    } catch (error) {
      console.error('Service Worker registration failed:', error);
    }
  }

  // Show update notification
  function showUpdateNotification(worker) {
    const notification = document.createElement('div');
    notification.className = 'sw-update-notification';
    notification.innerHTML = `
      <div class="sw-update-content">
        <p>A new version of Bukit Besi Blog is available!</p>
        <button class="sw-update-button" id="sw-update-accept">Update</button>
        <button class="sw-update-dismiss" id="sw-update-dismiss">Later</button>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    // Handle update
    document.getElementById('sw-update-accept').addEventListener('click', () => {
      worker.postMessage({ type: 'SKIP_WAITING' });
      window.location.reload();
    });
    
    // Handle dismiss
    document.getElementById('sw-update-dismiss').addEventListener('click', () => {
      notification.remove();
    });
  }

  // Handle controller change
  navigator.serviceWorker.addEventListener('controllerchange', () => {
    window.location.reload();
  });

  // Install prompt
  let deferredPrompt;
  
  window.addEventListener('beforeinstallprompt', (e) => {
    // Prevent the mini-infobar from appearing on mobile
    e.preventDefault();
    deferredPrompt = e;
    
    // Show install button
    showInstallPromotion();
  });

  function showInstallPromotion() {
    // Check if already installed
    if (window.matchMedia('(display-mode: standalone)').matches) {
      return;
    }
    
    // Check if user has dismissed before
    if (localStorage.getItem('pwa-install-dismissed')) {
      return;
    }
    
    const installBanner = document.createElement('div');
    installBanner.className = 'pwa-install-banner';
    installBanner.innerHTML = `
      <div class="pwa-install-content">
        <img src="/pwa/icon-72.png" alt="App icon" class="pwa-install-icon">
        <div class="pwa-install-text">
          <h3>Install Bukit Besi Blog</h3>
          <p>Add to your home screen for the best experience!</p>
        </div>
        <button class="pwa-install-button" id="pwa-install-accept">Install</button>
        <button class="pwa-install-dismiss" id="pwa-install-dismiss">Ã—</button>
      </div>
    `;
    
    document.body.appendChild(installBanner);
    
    // Handle install
    document.getElementById('pwa-install-accept').addEventListener('click', async () => {
      installBanner.remove();
      
      if (deferredPrompt) {
        deferredPrompt.prompt();
        
        const { outcome } = await deferredPrompt.userChoice;
        
        if (outcome === 'accepted') {
          console.log('User accepted the install prompt');
          // Track install
          if (typeof gtag !== 'undefined') {
            gtag('event', 'pwa_install', {
              'event_category': 'engagement',
              'event_label': 'accepted'
            });
          }
        }
        
        deferredPrompt = null;
      }
    });
    
    // Handle dismiss
    document.getElementById('pwa-install-dismiss').addEventListener('click', () => {
      installBanner.remove();
      localStorage.setItem('pwa-install-dismissed', 'true');
    });
    
    // Auto-hide after 10 seconds
    setTimeout(() => {
      if (installBanner.parentElement) {
        installBanner.classList.add('hide');
        setTimeout(() => installBanner.remove(), 300);
      }
    }, 10000);
  }

  // Track app install
  window.addEventListener('appinstalled', () => {
    console.log('PWA was installed');
    if (typeof gtag !== 'undefined') {
      gtag('event', 'pwa_installed', {
        'event_category': 'engagement'
      });
    }
  });

  // Network status
  function updateOnlineStatus() {
    const statusEl = document.getElementById('network-status');
    if (!statusEl) return;
    
    if (navigator.onLine) {
      statusEl.classList.remove('offline');
      statusEl.textContent = '';
    } else {
      statusEl.classList.add('offline');
      statusEl.textContent = 'You are currently offline';
    }
  }

  window.addEventListener('online', updateOnlineStatus);
  window.addEventListener('offline', updateOnlineStatus);

  // Background sync for comments
  if ('sync' in self.registration) {
    // Intercept comment form submissions
    document.addEventListener('submit', async (e) => {
      if (e.target.classList.contains('comment-form')) {
        e.preventDefault();
        
        const formData = new FormData(e.target);
        const comment = {
          postId: formData.get('postId'),
          author: formData.get('author'),
          email: formData.get('email'),
          content: formData.get('content'),
          timestamp: Date.now()
        };
        
        try {
          // Try to submit normally
          const response = await fetch('/api/comments', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(comment)
          });
          
          if (response.ok) {
            // Success - show confirmation
            showCommentSuccess();
          }
        } catch (error) {
          // Offline - save for later
          await saveCommentForSync(comment);
          showCommentQueued();
        }
      }
    });
  }

  async function saveCommentForSync(comment) {
    const cache = await caches.open('pending-comments');
    const request = new Request('/api/comments', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(comment)
    });
    
    await cache.put(request, new Response(JSON.stringify(comment)));
    await self.registration.sync.register('sync-comments');
  }

  function showCommentSuccess() {
    showNotification('Comment posted successfully!', 'success');
  }

  function showCommentQueued() {
    showNotification('Comment saved. It will be posted when you\'re back online.', 'info');
  }

  function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.classList.add('show');
    }, 10);
    
    setTimeout(() => {
      notification.classList.remove('show');
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }

  // Push notifications
  async function initPushNotifications() {
    // Check if push notifications are supported
    if (!('PushManager' in window)) {
      return;
    }
    
    // Check permission
    const permission = await Notification.requestPermission();
    if (permission !== 'granted') {
      return;
    }
    
    try {
      const registration = await navigator.serviceWorker.ready;
      const subscription = await registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: urlBase64ToUint8Array(
          'YOUR_PUBLIC_VAPID_KEY' // Replace with your VAPID key
        )
      });
      
      // Send subscription to server
      await saveSubscription(subscription);
      
    } catch (error) {
      console.error('Failed to subscribe to push notifications:', error);
    }
  }

  function urlBase64ToUint8Array(base64String) {
    const padding = '='.repeat((4 - base64String.length % 4) % 4);
    const base64 = (base64String + padding)
      .replace(/\-/g, '+')
      .replace(/_/g, '/');
    
    const rawData = window.atob(base64);
    const outputArray = new Uint8Array(rawData.length);
    
    for (let i = 0; i < rawData.length; ++i) {
      outputArray[i] = rawData.charCodeAt(i);
    }
    
    return outputArray;
  }

  async function saveSubscription(subscription) {
    // Send to your server
    const response = await fetch('/api/push-subscribe', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(subscription)
    });
    
    return response.json();
  }

  // Share API enhancement
  function enhanceShareButtons() {
    if (!navigator.share) return;
    
    const shareButtons = document.querySelectorAll('.share-button');
    
    shareButtons.forEach(button => {
      button.addEventListener('click', async (e) => {
        e.preventDefault();
        
        try {
          await navigator.share({
            title: document.querySelector('.post-title').textContent,
            text: document.querySelector('meta[name="description"]').content,
            url: window.location.href
          });
          
          // Track share
          if (typeof gtag !== 'undefined') {
            gtag('event', 'share', {
              'method': 'web_share_api',
              'content_type': 'article'
            });
          }
        } catch (error) {
          // Fallback to original behavior
          window.open(button.href, '_blank');
        }
      });
    });
  }

  // Initialize everything
  document.addEventListener('DOMContentLoaded', () => {
    registerSW();
    updateOnlineStatus();
    enhanceShareButtons();
    
    // Add PWA styles
    const style = document.createElement('style');
    style.textContent = `
      .sw-update-notification {
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.2);
        padding: 20px;
        z-index: 10000;
        animation: slideUp 0.3s ease-out;
      }
      
      [data-theme="dark"] .sw-update-notification {
        background: #2a2a2a;
        color: white;
      }
      
      @keyframes slideUp {
        from {
          transform: translate(-50%, 100%);
        }
        to {
          transform: translate(-50%, 0);
        }
      }
      
      .sw-update-content {
        display: flex;
        align-items: center;
        gap: 15px;
      }
      
      .sw-update-button,
      .sw-update-dismiss {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
      }
      
      .sw-update-button {
        background: var(--primary);
        color: white;
      }
      
      .sw-update-dismiss {
        background: transparent;
        color: var(--text);
      }
      
      .pwa-install-banner {
        position: fixed;
        bottom: 20px;
        left: 20px;
        right: 20px;
        max-width: 400px;
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        padding: 20px;
        z-index: 1000;
        animation: slideUp 0.5s ease-out;
        transition: all 0.3s;
      }
      
      [data-theme="dark"] .pwa-install-banner {
        background: #2a2a2a;
      }
      
      .pwa-install-banner.hide {
        transform: translateY(120%);
        opacity: 0;
      }
      
      .pwa-install-content {
        display: grid;
        grid-template-columns: auto 1fr auto auto;
        gap: 15px;
        align-items: center;
      }
      
      .pwa-install-icon {
        width: 48px;
        height: 48px;
        border-radius: 12px;
      }
      
      .pwa-install-text h3 {
        margin: 0 0 5px;
        font-size: 16px;
      }
      
      .pwa-install-text p {
        margin: 0;
        font-size: 14px;
        color: #666;
      }
      
      [data-theme="dark"] .pwa-install-text p {
        color: #999;
      }
      
      .pwa-install-button {
        background: var(--primary);
        color: white;
        border: none;
        border-radius: 6px;
        padding: 10px 20px;
        font-weight: 600;
        cursor: pointer;
      }
      
      .pwa-install-dismiss {
        background: transparent;
        border: none;
        font-size: 24px;
        color: #999;
        cursor: pointer;
        padding: 0;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      
      #network-status {
        position: fixed;
        top: var(--header-height);
        left: 0;
        right: 0;
        background: #ff4757;
        color: white;
        text-align: center;
        padding: 8px;
        font-size: 14px;
        transform: translateY(-100%);
        transition: transform 0.3s;
      }
      
      #network-status.offline {
        transform: translateY(0);
      }
      
      .notification {
        position: fixed;
        top: 80px;
        right: 20px;
        background: white;
        border-radius: 8px;
        padding: 16px 20px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        transform: translateX(400px);
        transition: transform 0.3s;
        z-index: 1000;
      }
      
      .notification.show {
        transform: translateX(0);
      }
      
      .notification-success {
        border-left: 4px solid #28a745;
      }
      
      .notification-info {
        border-left: 4px solid #17a2b8;
      }
      
      @media (max-width: 600px) {
        .pwa-install-content {
          grid-template-columns: auto 1fr;
          grid-template-rows: auto auto;
        }
        
        .pwa-install-text {
          grid-column: 1 / -1;
        }
        
        .pwa-install-button {
          grid-column: 1 / -1;
          width: 100%;
        }
        
        .pwa-install-dismiss {
          position: absolute;
          top: 10px;
          right: 10px;
        }
      }
    `;
    document.head.appendChild(style);
  });
})();
